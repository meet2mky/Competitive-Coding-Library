{
  "DSU 1D 0 Based Index": {
  "prefix": "meet2mky dsu simple",
  "body": [
    "class DSU_SIMPLE",
    "{",
    "    vector<int> par;",
    "    vector<int> sz;",
    "",
    "public:",
    "    DSU_SIMPLE()",
    "    {",
    "        par.clear();",
    "        sz.clear();",
    "    }",
    "    void init(int n) // 0 index based",
    "    {",
    "        par.resize(n);",
    "        sz.resize(n);",
    "        for (int i = 0; i < n; i++)",
    "        {",
    "            par[i] = i;",
    "            sz[i] = 1;",
    "        }",
    "    }",
    "    int find(int a)",
    "    {",
    "        if (par[a] == a)",
    "            return a;",
    "        return par[a] = find(par[a]);",
    "    }",
    "    int size(int a)",
    "    {",
    "        return sz[find(a)];",
    "    }",
    "    void unite(int a, int b)",
    "    {",
    "        a = find(a);",
    "        b = find(b);",
    "        if (b != a)",
    "        {",
    "            if (sz[a] < sz[b])",
    "                swap(a, b);",
    "            sz[a] += sz[b];",
    "            par[b] = a;",
    "        }",
    "    }",
    "    bool same(int a, int b)",
    "    {",
    "        return find(a) == find(b);",
    "    }",
    "};"
  ],
  "description": "DSU 1D 0 Based Index"
},
"DSU Map Based": {
  "prefix": "meet2mky dsu map",
  "body": [
    "template <typename T>",
    "class DSU_MAP",
    "{",
    "    map<T, T> par;",
    "    map<T, int> sz;",
    "",
    "public:",
    "    DSU_MAP()",
    "    {",
    "        par.clear();",
    "        sz.clear();",
    "    }",
    "    void init(vector<T> v) // map based dsu",
    "    {",
    "        for (int i = 0; i < (int)v.size(); i++)",
    "        {",
    "            par[v[i]] = v[i];",
    "            sz[v[i]] = 1;",
    "        }",
    "    }",
    "    void add(T a) // adds new elements on the fly",
    "    {",
    "        if (par.find(a) == par.end())",
    "        {",
    "            par[a] = a;",
    "            sz[a] = 1;",
    "        }",
    "    }",
    "    int find(T a)",
    "    {",
    "        if (par[a] == a)",
    "            return a;",
    "        return par[a] = find(par[a]);",
    "    }",
    "    int size(T a)",
    "    {",
    "        return sz[find(a)];",
    "    }",
    "    void unite(T a, T b)",
    "    {",
    "        a = find(a);",
    "        b = find(b);",
    "        if (b != a)",
    "        {",
    "            if (sz[a] < sz[b])",
    "                swap(a, b);",
    "            sz[a] += sz[b];",
    "            par[b] = a;",
    "        }",
    "    }",
    "    bool same(T a, T b) // belong to same comp",
    "    {",
    "        return find(a) == find(b);",
    "    }",
    "    bool have(T a) // check if a is present in dsu",
    "    {",
    "        return par.find(a) != par.end();",
    "    }",
    "};"
  ],
  "description": "DSU Map Based"
}
}